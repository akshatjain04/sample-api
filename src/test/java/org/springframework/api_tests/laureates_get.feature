# ********RoostGPT********

# Test generated by RoostGPT for test MiniProjects using AI Type Open AI and AI Model gpt-4-1106-preview
# 
# Feature file generated for /laureates_get for http method type GET 
# RoostTestHash=bb9ad621b1
# 
# 

# ********RoostGPT********
Feature: Nobel Prize Laureates API Test

Background:
  * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:8080')
  * url urlBase
  * def authToken = karate.properties['AUTH_TOKEN']
  * configure headers = {Authorization: '#(authToken)'}

Scenario Outline: Get Laureates with valid query parameters
  Given path '/2.1/laureates'
  And param offset = <offset>
  And param limit = <limit>
  And param sort = <sort>
  And param ID = <ID>
  When method get
  Then status 200
  And assert response.laureates != null
  And match each response.laureates[*].id == '#number'

  Examples:
    | offset | limit | sort  | ID   |
    | 1      | 10    | asc   | 456  |
    | 2      | 5     | desc  | 789  |

Scenario Outline: Get Laureates with invalid query parameters
  Given path '/2.1/laureates'
  And param offset = <offset>
  And param limit = <limit>
  When method get
  Then status 400

  Examples:
    | offset | limit |
    | 'abc'  | 10    |
    | 1      | 'xyz' |

Scenario Outline: Get Laureates with specific search criteria
  Given path '/2.1/laureates'
  And param name = <name>
  And param gender = <gender>
  And param birthDate = <birthDate>
  When method get
  Then status 200
  And match response.laureates[*].laureateIfPerson.knownName.en == <name>
  And match response.laureates[*].laureateIfPerson.gender == <gender>
  And match response.laureates[*].laureateIfPerson.birth.date == <birthDate>

  Examples:
    | name              | gender  | birthDate    |
    | 'Marie Curie'     | female  | '1867-11-07' |
    | 'Albert Einstein' | male    | '1879-03-14' |

Scenario: Get Laureates with unauthorized access
  Given path '/2.1/laureates'
  And removeHeader 'Authorization'
  When method get
  Then status 401
