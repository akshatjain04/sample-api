# ********RoostGPT********

# Test generated by RoostGPT for test MiniProjects using AI Type Open AI and AI Model gpt-4-1106-preview
# 
# Feature file generated for /laureate/{laureateID}_get for http method type GET 
# RoostTestHash=3a8d014c99
# 
# 

# ********RoostGPT********
Feature: Nobel Prize Laureate Information Retrieval

Background:
  * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:8080')
  * def authToken = karate.properties['AUTH_TOKEN']
  * header Authorization = 'Bearer ' + authToken

Scenario Outline: Get information for a specific Nobel Prize Laureate by ID
  Given url urlBase + '/2.1/laureate/<laureateID>'
  When method get
  Then status 200
  And match response == '#object'
  And match response.laureate.id == '#number'
  And match response.laureate.laureateIfPerson.knownName.en == '#string'

  Examples:
    | laureateID |
    | 456        |

Scenario: Attempt to get information for a Nobel Prize Laureate with a non-existing ID
  Given url urlBase + '/2.1/laureate/999999'
  When method get
  Then status 404
  And match response == 
  """
  {
    code: '404',
    message: 'There is no Laureate with that ID'
  }
  """

Scenario: Attempt to get information for a Nobel Prize Laureate with an invalid ID
  Given url urlBase + '/2.1/laureate/abc'
  When method get
  Then status 400
  And match response == 
  """
  {
    code: '400',
    message: 'Invalid ID format'
  }
  """

Scenario: Attempt to get information for a Nobel Prize Laureate with an ID that causes semantic errors
  Given url urlBase + '/2.1/laureate/-1'
  When method get
  Then status 422
  And match response == 
  """
  {
    code: '422',
    message: 'Semantic error with the provided ID'
  }
  """
